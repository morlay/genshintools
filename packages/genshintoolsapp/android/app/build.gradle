import groovy.json.JsonOutput

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 31

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "dev.morlay.genshintools"
        minSdkVersion 19
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }


    signingConfigs {
        debug {
            storeFile file("debug.keystore")
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.debug
            minifyEnabled true

            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    output.outputFileName = "${variant.applicationId}-${variant.name}-${output.getFilter(output.ABI)}-${variant.versionName}-${flutterVersionCode}.apk"
                    output.versionCodeOverride = flutterVersionCode.toInteger()

                    if (variant.name == "release") {
                        assembleRelease.doLast {
                            def releaseDir = "../../build/.release/android";

                            copy {
                                from("${output.outputFile.parent}") {
                                    include "*.apk"
                                }
                                into releaseDir
                            }
                            def json = [
                                    packageName: "${variant.applicationId}",
                                    version    : "${variant.versionName}",
                                    buildNumber: "${output.versionCodeOverride}",
                                    downloadURL: "/android/${output.outputFileName}",
                                    description: file("../../../../RELEASE_NOTES.md").text,
                            ]
                            file("${releaseDir}/latest.json").write(
                                    JsonOutput.prettyPrint(JsonOutput.toJson(json))
                            )
                        }
                    }
                }
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

